package com.example.demo.examples;

import java.math.BigInteger;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Date;

import org.bouncycastle.asn1.x500.X500Name;
import org.bouncycastle.asn1.x509.BasicConstraints;
import org.bouncycastle.asn1.x509.Extension;
import org.bouncycastle.asn1.x509.GeneralName;
import org.bouncycastle.asn1.x509.GeneralNames;
import org.bouncycastle.cert.CertIOException;
import org.bouncycastle.cert.X509CertificateHolder;
import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;
import org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;
import org.bouncycastle.operator.ContentSigner;
import org.bouncycastle.operator.OperatorCreationException;
import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;

public class CertificateDemo {
	
	final static class GeneratedCert {
		public final PrivateKey privateKey;
		public final X509Certificate certificate;
		
		public GeneratedCert(PrivateKey key, X509Certificate cert) {
			this.privateKey = key;
			this.certificate = cert;
		}
	}
	
	
	/**
	 * @param cnName The CN={name} of the certificate. When the certificate is for a domain it should be the domain name
	 * @param domain Nullable. The DNS domain for the certificate.
	 * @param issuer Issuer who signs this certificate. Null for a self-signed certificate
	 * @param isCA   Can this certificate be used to sign other certificates
	 * @return Newly created certificate with its private key
	 * @throws NoSuchAlgorithmException 
	 * @throws CertIOException 
	 * @throws CertificateException 
	 * @throws OperatorCreationException 
	 */
	private static GeneratedCert createCertificate(String cnName, String domain, 
			GeneratedCert issuer, boolean isCA) throws NoSuchAlgorithmException, CertIOException, CertificateException, OperatorCreationException {
		KeyPair certKeyPair = generateKeyPary();
		
		X500Name name = new X500Name("CN=" + cnName);
		 // If you issue more than just test certificates, you might want a decent serial number schema ^.^
	    BigInteger serialNumber = BigInteger.valueOf(System.currentTimeMillis());
	    Instant validFrom = Instant.now();
	    Instant validUntil = validFrom.plus(10 * 360, ChronoUnit.DAYS);

	    // If there is no issuer, we self-sign our certificate.
	    X500Name issuerName;
	    PrivateKey issuerKey;
	    if (issuer == null) {
	        issuerName = name;
	        issuerKey = certKeyPair.getPrivate();
	    } else {
	        issuerName = new X500Name(issuer.certificate.getSubjectDN().getName());
	        issuerKey = issuer.privateKey;
	    }

	    // The cert builder to build up our certificate information
	    JcaX509v3CertificateBuilder builder = new JcaX509v3CertificateBuilder(
	            issuerName,
	            serialNumber,
	            Date.from(validFrom), Date.from(validUntil),
	            name, certKeyPair.getPublic());

	    // Make the cert to a Cert Authority to sign more certs when needed
	    if (isCA) {
	        builder.addExtension(Extension.basicConstraints, true, new BasicConstraints(isCA));
	    }
	    // Modern browsers demand the DNS name entry
	    if (domain != null) {
	        builder.addExtension(Extension.subjectAlternativeName, false,
	                new GeneralNames(new GeneralName(GeneralName.dNSName, domain)));
	    }

	    // Finally, sign the certificate:
	    ContentSigner signer = new JcaContentSignerBuilder("SHA256WithRSA").build(issuerKey);
	    X509CertificateHolder certHolder = builder.build(signer);
	    X509Certificate cert = new JcaX509CertificateConverter().getCertificate(certHolder);

	    return new GeneratedCert(certKeyPair.getPrivate(), cert);
		
		
		return null;
	}
	
	
	private static KeyPair generateKeyPary() throws NoSuchAlgorithmException {
		KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
		return keyPairGenerator.generateKeyPair();
	}

}
